[ -n "$PS1" ] && bind "set completion-ignore-case on"

export RSYNC_RSH="ssh"

export PYTHONSTARTUP="$HOME/.pythonrc.py"
export GREP_OPTIONS='--color=auto'
export GREP_COLOR='1;32'

__gps1() {
	local _tab_title
	local _pretty_pwd
	local _project
	local _ref
	local _stat_flags
	local _base_dir
	local _sub_dir
	local _stat_color

	# ansi terminal colors
	if [ "$TERM" != "dumb" ]; then
		local bold=$(tput bold)
		local normal=$(tput sgr0)

		local red=$(tput setaf 1)
		local green=$(tput setaf 2)
		local yellow=$(tput setaf 3)
		local blue=$(tput setaf 4)
		local magenta=$(tput setaf 5)
		local cyan=$(tput setaf 6)
		local white=$(tput setaf 7)

		local RED=${bold}${red}
		local GREEN=${bold}${green}
		local YELLOW=${bold}${yellow}
		local BLUE=${bold}${blue}
		local MAGENTA=${bold}${magenta}
		local CYAN=${bold}${cyan}
		local WHITE=${bold}${white}
	fi

	__prompt_command() {
		local last_command

		function parse_git_dirty {
			git diff --no-ext-diff --quiet --exit-code > /dev/null 2>&1 || echo "*"
		}
		function parse_git_staged {
			git diff --cached --no-ext-diff --quiet --exit-code > /dev/null 2>&1 || echo "~"
		}
		function parse_git_ahead {
			git branch -v 2> /dev/null | grep -Eo '^\* [^ ]* *[^ ]* *\[[^]]*\]' | grep -Eo '\[[^]]*\]$' | awk 'ORS="";/ahead/ {print "+"} /behind/ {print "-"}'
		}
		function parse_git_stashed {
			git rev-parse --verify refs/stash >/dev/null 2>&1 && echo "$"
		}
		function parse_git_branch {
	#		__git_ps1 "%s"
			git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1/"
		}

		last_command=$(history 1 | sed -e "s/^[ ]*[0-9]*[ ]*//g")

		if [ "true" = "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then

			# find the parent dir and project name
			_base_dir=$(git rev-parse --show-toplevel 2>/dev/null)
			_project=$(basename "${_base_dir}")
			_base_dir="${_base_dir%$_project}"
			_base_dir="${_base_dir/$HOME/~}"

			# find the path relative to project root
			_sub_dir=$(git rev-parse --show-prefix)
			_sub_dir="${_sub_dir%/}"
			[[ -n $_sub_dir ]] && _sub_dir="/$_sub_dir"

			# get the current branch
			_ref=$(parse_git_branch)
			[[ "$_ref" = '(no branch)' ]] && _ref="$(git rev-parse --short HEAD)â€¦"

			# save these for later
			local _st_dirty="$(parse_git_dirty)"
			local _st_staged="$(parse_git_staged)"
			local _st_ahead="$(parse_git_ahead)"
			local _st_stashed="$(parse_git_stashed)"

			_stat_flags="${_st_dirty}${_st_staged}${_st_ahead}${_st_stashed}"
			[[ -n "$_stat_flags" ]] && _stat_flags=" $_stat_flags"

			if [ -n "$_st_dirty" ] || [ -n "$_st_staged" ]; then
				_stat_color="${RED}"
			elif [ -n "$_st_stashed" ]; then
				_stat_color="${YELLOW}"
			else
				_stat_color="${green}"
			fi
			PS1="\[${TAB_TITLE}\]${PS0/\\W/$GPS1}"

			_tab_title="$_project:[$last_command]"
		else
			PS1="\[${TAB_TITLE}\]${PS0}"
			_tab_title="[$last_command]"
		fi

		_pretty_pwd="${PWD/$HOME/~}"
	}

	# Store the old one for later
	[ -z "$PS0" ] && PS0=$PS1

	# Add some awesomeness here.
	PROMPT_COMMAND=__prompt_command

#	TAB_TITLE='\e]2;\h::${_pretty_pwd}\a\e]1;${_tab_title}\a'
	TAB_TITLE=''
	GPS1='\[${blue}\]${_base_dir}\[${WHITE}\]${_project}\[${normal}\][\[${_stat_color}\]${_ref}${_stat_flags}\[${normal}\]]\[${blue}\]${_sub_dir}\[${normal}\]'
}
__gps1
